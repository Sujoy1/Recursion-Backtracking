#include<bits/stdc++.h>
using namespace std;

class Graph{
    
    int V;
    list<int> *adj;
    unordered_map<pair<int,int>,int> dp;
    
    
    Graph(int V){
        this->V  = V;
        adj = new list<int>[V];
    }
    
    public :
    
    
    void addEdge(int u,int v);
    void DFS(int src,vector<bool>& visted,int k);
    bool pathMoreThanK(int src,int k);
    
};

void Graph :: addEdge(int u,int v,int w){
     adj[u].push_back(v);
     adj[v].push_back(u);
     dp[make_pair(u,v)]=w;
}

void Graph :: DFS(int src,vector<bool>& visited,int k,bool& ans){
    
    if(k==0){
    ans=true;
    return;
    }
    
    visted[src]=true;
    
    list<int> :: iterator itr;
    
    for(itr=adj[src].begin();itr!=adj[src].end();itr++){
        if(!visted[*itr]){
            DFS(*itr,visited,k-dp[src,*itr],ans)
        }
    }
    
    visted[src]=false;
    return;
}

bool Graph :: pathMoreThanK(int  n,int src,int k){
    
    bool ans=false;
    vector<bool> visited;
    visited.assign(n,false);
    
    DFS(src,visited,k,ans);
    
    return ans;
}



int main()
{
    // create the graph given in above figure
    int V = 9;
    Graph g(V);
 
    //  making above shown graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);
 
    int src = 0;
    int k = 62;
    g.pathMoreThanK(V,src, k)? cout << "Yes\n" :
                             cout << "No\n";
 
    k = 60;
    g.pathMoreThanK(V,src, k)? cout << "Yes\n" :
                             cout << "No\n";
 
    return 0;
}